<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="copyright" content="1997,1998,1999,2013 Mark D. Niemiec" />
<title>Multi-colored Life</title>
<meta name="description"
content="Conway's Game of Life: Multi-colored life object lists and glider syntheses" />
<meta name="keywords" content="conway game life multi-colored object list glider synthesis" />
  <style type="text/css"><!--
    body{color:black;background-color:white;
	margin-top:0;padding:0;border:0;height:100%;
	font-family:Verdana,Arial,Helvetica,sans-serif;}
    h1{text-align:center;
	font-family:Verdana,Arial,Helvetica,sans-serif;font-variant:small-caps;}
    h2{font-family:Verdana,Arial,Helvetica,sans-serif;font-variant:small-caps;}
    h3{font-family:Verdana,Arial,Helvetica,sans-serif;font-variant:small-caps;}
    img{border:2px black solid;}
    table{border:1px black solid;border-spacing:0px;}
    td,th{border:1px black solid;vertical-align:top;font-size:12px;padding:1px;}
    a{text-decoration:none;}
    a:focus{text-decoration:underline;}
    a:hover{text-decoration:underline;}
    a.p:link{color:#008000;}
    a.p:visited{color:#00C000;}
    a.i:link{color:#000080;}
    a.i:visited{color:#000080;}
    a.j:link{color:#008080;}
    a.j:visited{color:#008080;}
    a.x:link{color:#800000;}
    a.x:visited{color:#FF0000;}
    .s{background-color:#C0C0C0;}
    .b{background-color:#AAAAFF;}
    .g{background-color:#AAFFAA;}
    .c{background-color:#AAFFFF;}
    .r{background-color:#FFAAAA;}
    .m{background-color:#FFAAFF;}
    .y{background-color:#FFFFAA;}
    .o{background-color:#FFAA55;}
    .v{background-color:#AA55FF;}
    .h{background-color:#E0E0FF;}
    .z{background-color:#000000;color:#FFFFFF;}
  --></style>
</head>

<body>

<a name="top"></a>
<h1>Multi-colored Life</h1>

<p align="center">
	<b><a class="j" href="#c-color">Color Variants</a>:</b>
	  <a class="j" href="#c-imm">Immigration</a> |
	  <a class="j" href="#c-quad">Quad-Life</a> |
	  <a class="j" href="#c-oct">Oct-Life</a> |
	  <a class="j" href="#c-gen">General</a> |
	  <a class="j" href="#c-rat">Rational</a><br />
	  <a class="j" href="#c-multi">Multiple</a><br />
	<b><a class="j" href="#c-synth">Syntheses</a>:</b>
	  <a class="j" href="#c-run">Running patterns</a> |
	  <a class="j" href="#c-p1">Still-lifes</a> |
	  <a class="j" href="#c-pp1">Pseudo-still-lifes</a> |
	  <a class="j" href="#c-osc">Oscillators</a> |
	  <a class="j" href="#c-ss">Spaceships</a> |
	  <a class="j" href="#c-cons">Constellations</a>
</p>

<hr /><hr />
<a name="c-color"></a>
<h2>Color variants</h2>

<p>An interesting variation of the Life rules is to use several distinct
living state, with each behaving according to Life rules, but, in
addition, carrying independent color information. The color of each
newly-born bit is determined by the color of its parents. Resulting patterns
have exactly the same life/death behavior as in normal Life, but the colors
of resulting bits provides interesting additional complexity.</p>

<p>All the coloring variants discussed here are supersets of ordinary
Life (i.e. bits whose parents are all of the same color will be born
in that same color).</p>

<p>Multi-color (hybrid) objects can exist in all variants.
Objects with permanent bits (such as still-lifes, and oscillators with
stators) typically have many different color variants, the number of which
increases exponentially with the number of stator bits. There are also many
oscillators and spaceships with multi-color forms, but these tend to be more
fragile, as the general tendency in such rules is for one color to
dominate. (For example, in examining all the ways that two gliders
of different colors can collide and not die, in less than 1/6 of them does the
census includes bits of both colors).</p>

<hr />
<a name="c-imm"></a>
<h2>Immigration (two-color Life)</h2>

<p>Immigration is a coloring variant that uses two different symmetrical
colors. The sole rule that determines the color of births is simple:</p>
<p><ul>
    <li>Each bit's color is the same color as the majority of its parents.</li>
</ul></p>

<p>(The name <i>Immigration</i> is used, because this variant was
originally designed for a two-player Life-based game with the same name,
where players added bits of their own colors to the edge of the field, at
which point the bits would immigrate to the field itself. The object was to
dominate the field with one's color, at the expense of the opponent's.)</p>

<hr />
<a name="c-quad"></a>
<h2>Quad-Life (four-color Life)</h2>

<p>Quad-Life is a coloring variant that uses four different symmetrical colors.
The two rules that determines the color of births are:</p>
<p><ul>
    <li>If two parents have the same color (i.e. they form a
	majority), the child has the same color.
	(This is the same as Life and Immigration).</li>
    <li>If there is no majority (i.e. all 3 parents have different colors),
	the child is of the fourth color.</li>
</ul></p>

<p>Quad-Life is a superset of both normal Life and Immigration. Its most
interesting feature is that populations where one color has totally died out
can give birth to that same color again. Only if two colors die out (reducing
this to Immigration) is such color death necessarily permanent.</p>

<p>Also, in many cases, oscillator and spaceships that include 3 or 4 colors
may have higher periods than their normal Life counterparts, cycling through
several different color combinations. For example, the 4-color Glider has one
side of one color, while the two bits on the other side are of different colors,
and cycle through the three different permutations of the two other colors,
giving the resulting multi-color Glider a period of 12, rather than the usual 4.
Whenever such multi-colored objects have one or more periods that differ from
those of the original objects, those periods are shown in parentheses at the
end (if known).</p>

<hr />
<a name="c-oct"></a>
<h2>Oct-Life (eight-color Life)</h2>

<p>Oct-Life is a coloring variant that uses a sets of four different symmetrical
colors, and another set of their complements. Colors in each of the two sets are
symmetrical with each other, but not with colors of the opposite set. The rules
that determine the color of births are:</p>
<p><ul>
    <li>If two parents have the same color (i.e. they form a
	majority), the child has the same color.
	(This is the same as Life and Immigration).</li>
    <li>If two parents have opposite colors, they cancel, and
	the child has the same color as the third parent.</li>
    <li>Otherwise, if one parent has the opposite type from the other two,
	the child inherits its color.</li>
    <li>Otherwise, when all three parents have the same type, the child
	is of the opposite type of the fourth color.
	(This is similar to, but quite different than Quad-Life)</li>
</ul></p>

<p>It turns out that these rules can be simplified into a single rule (that
is generalized in the following section). If one conceptualizes the color
space as a cube with the four primary colors at the non-adjacent even-numbered
vertices, and their complements at the respective diametrically opposite
odd-numbered vertices, then the child color is chosen in such a way that the
sum of the lengths of the minimal paths along the cube edges from each parent
to the child is minimized.</p>

<p>Oct-Life is a superset of both normal Life and Immigration, but not of
Quad-Life, since the child of three different colors is the opposite of the
fourth color. This makes more sense logically. For example, if one chooses
physical colors (e.g. red, blue, green and black, and their respective
complements teal, brown, purple and white), a child's color is often the one
most closely matching a mixing of the parents (e.g. red+blue+green=white,
black+white+green=green, etc.). Unfortunately, the colors of resulting Life
patterns are nowhere nearly as interesting as those of Quad-Life.</p>

<hr />
<a name="c-gen"></a>
<h2>More general colorizations</h2>

<p>The single geometric rule used in Oct-Life can be generalized to any
geometric figure, and any number of colors, and this works even for other rules
with births on numbers of parents other than three. The following rules
apply:</p>
<p><ul>
    <li>Arrange the colors at the vertices of a regular polygon, polyhedron,
	polytope, etc. (e.g. Life uses a point, Immigration uses a line,
	Quad-Life uses a tetrahedron, and Oct-Life uses a cube).</li>
    <li>The behavior of colors will only be symmetrical with respect to
	all other colors if every vertex on the figure has the same
	relationship to every other vertex (e.g. this is true of Life,
	Immigration and Quad-Life, and also any rule with three colors,
	but not Oct-Life).</li>
    <li>(Non-regular polyhedra, polytopes, etc. like pyramids and Johnson
	solids can also be used, but the relative symmetry of the colors
	space is further reduced).</li>
    <li>For each vertex on the figure, compute the sum of the minimal
	paths from that vertex all parents.</li>
    <li>Choose the vertex with the smallest sum.</li>
    <li>If two or more vertices share the smallest sum, eliminate them
	all from consideration, and try again.</li>
    <li>If no vertices remain, choose an arbitrary color (typically
	color #1).</li>
</ul></p>

<p>The last rule breaks color symmetry if more than one color is used, and
should be avoided if at all possible. It can occur in any of the following
situations:</p>
<p><ul>
    <li>Rules that permit birth on 0</li>
    <li>GCD (number of colors, any birth condition) exceeds 1</li>
    <li>Any birth-on-<i>n</i> condition where there are <i>n</i>+2 or more
	totally symmetrical vertices (this is why polygons usually work better
	than polyhedra or polytopes, even though they have less symmetry).</li>
</ul></p>

<p>These place the following restrictions on birth conditions:</p>
<p><ul>
    <li>Birth on <i>n</i>: <i>n</i>-dimensional triangular polytope with
	<i>n</i>+1 vertices is always allowed.</li>
    <li>Birth on 0: Only one color allowed.</li>
    <li>Birth on 1: No restrictions.</li>
    <li>Birth on 2, 4, 8: Odd polygons.</li>
    <li>Birth on 3: 2 colors, even polygons, polyhedra, polytopes without
	triangular sides.</li>
    <li>Birth on 5: 2 colors, polygons not divisible by 5, polyhedra except
	dodecahedrons, polytopes.</li>
    <li>Birth on 6: Any polygons not divisible by 2-4.</li>
    <li>Birth on 7: 2 colors, polygons not divisible by 7, polyhedra,
	polytopes.</li>
</ul></p>

<p>Multiple birth conditions combine all restrictions. For example, the rule
<a class="i" href="rule34.htm">B34/S34</a> requires at least 5 colors, and a
pentagon works, but a hyper-tetrahedron does not, since birth on 3 would not
know which of the two remaining colors to choose.</p>

<hr />
<a name="c-rat"></a>
<h2>Rational colorizations</h2>

<p>Rather than having a finite number of discrete color states, another
approach is to treat the colors as a spectrum, represented by a rational
number (e.g. 0 for black and 1 for white, with many shades of grey
inbetween), or a vector of such numbers (e.g. 0,0,0 for black, 1,1,1 for
white 1,0,0 for red, 0,1,0 for green, and 0,0,1 for blue). When a child is
born, its color is simply the average color of its parents.</p>

<p>Under such rules, colors tend to bleed together, and usually reach an
equilibrium. For example, in oscillators with bushings of multiple colors,
nearby rotor cells usually approximate rational sums of nearby bushing cells.
Oscillators with no bushings (and also spaceships, since they can never have
bushings) usually approximate a single blended color.</p>

<p>One kinds of exception to this occurs when one part of the oscillator or
spaceship has a colorization totally independent of any other, because other
parts may cause deaths, but never contribute births (or if they do, these are
typically of short-lived sparks that in turn turn only contribute subsequent
deaths). Another kind happens when one part of the oscillator is sandwiched
between two or more independently-colored parts - all of which contribute
colors much like multi-colored bushings do (e.g. if a toad is hassled
by two oscillators of different colors, the bits of the toad will eventually
approach rational fractions of the sums of the colors of the two hasslers).</p>

<p>In the same way that it is possible to construct Life machinery that can
have populations that are asymptotic to irrational numbers, it should be
possible to construct similar mechanisms to generate colorizations that are
asymptotic to irrational numbers as well.</p>

<hr />
<a name="c-multi"></a>
<h2>Multiple colorizations</h2>

<p>Just as it's possible to add colorization to Life to add an additional but
independent data channel to a Life pattern, it's possible to add multiple
independent colorizations simultaneously. For example, one could have one
Quad-life colorization of red, green, blue and yellow, and another one of
square, round, triangular and hexagonal, yielding 16 possible living states.</p>

<hr /><hr />
<a name="c-synth"></a>
<h2>Syntheses</h2>
<p>In the synthesis files contained here, each file contains methods for
synthesizing one or more Immigration and/or Quad-Life colorization of a normal
Life. Instead of the normal convention used elsewhere on this site (i.e.
color 1 = before state, color 2 = after state, color 3 (where necessary) =
useless debris that must be subsequently eliminated), both "before" and
"after" images here use the same colors, representing up to four different
colors of Life bits. Whenever four colors are not needed (e.g. for two-color
Immigration colorizations), colors 2, 3, and sometimes 4 are used, while color
1 is used to represent "don't care" bits (e.g. an incoming glider whose
colorization is irrelevant in the final result, because, while it affects the
states of other bits, it does not affect their color, and its own bits all die.)
This is especially true in the case of two-color (i.e. Immigration) results;
gliders of the default color may be replaced by either color.</p>

<p>The lists of objects (and, indeed, the specific multi-color forms
synthesized) are not intended to be exhaustive; instead, they are merely small
samplings of what is possible. The number of possible multi-color forms
increases exponentially. For example, for an asymmetric <i>n</i>-bit still-life or
pseudo-still-life, the number of distinct non-trivial <i>k</i>-color
colorizations is
<i>k</i><sup><i>n</i></sup>/<i>k</i>! - <i>(k-1)</i><sup><i>n</i></sup>/<i>(k-1)</i>!.
The number of possible symmetrical objects is smaller for combinatorical
reasons. The number of possible oscillators and spaceships is also usually much
smaller because, while stators can have the same number of variations as
still-lifes, rotors and spaceships are much more restricted, as color
information is frequently lost with cell births and deaths.</p>

<p>For some of the smaller objects, the syntheses show syntheses for all 2-color
variants (or these can be deduced from examples shown); these syntheses are
marked with a *. If they also show all 4-color variants, they are marked with
**.</p>

<p>Larger objects consisting of multiple distinct parts can often be trivially
hybridized by constructing different independent parts from components of
different colors.</p>

<p>The stamp collections each show a single colorization of each object.
Most of the syntheses include more than one colorization, so the costs in
gliders frequently show ranges, as some colorizations are more expensive to
synthesize than others.</p>

<hr />
<a name="c-run"></a>
<h2>Running Patterns</h2>
<p>The patterns on this page can be run by Golly, but require the
following rule files to first be downloaded and installed.
They can either be installed for all users (in the Rules directory directly
under where the Golly application is installed), or in the current user's
personal Rule directory. (To find out where this is, run Golly, select
<i>File/Preferences...</i>, look at the <i>Control</i> tab.
It is displayed right next to the <i>Your Rules...</i> button.</p>

<p>Golly versions 2.5 and later can use the single rule file
(<a class="p" href="rules/Life4c.rule">Life4c.rule</a>).</p>

<p>Earlier versions of Golly require two files: the rule table
(<a class="p" href="rules/Life4c.table">Life4c.table</a>) and the corresponding
color table (<a class="p" href="rules/Life4c.colors">Life4c.colors</a>).</p>

<hr />
<a name="c-p1"></a>
<h2>34 Multi-color <a class="i" href="p1.htm">still-lifes</a></h2>
<p><a class="p" href="stamp/c-p1.rle"><img src="map/c-p1.png"
 alt="multi-color still-lifes"
 width="621" height="241" usemap="#c-p1" /></a><br />
    <table width="625">
    <colgroup><col width="71" /><col span="8" width="60" /><col width="72" />
	</colgroup>
    <tr>
	<td><a class="p" href="color/c4bk.rle">Block** [2-16]</a></td>
	<td><a class="p" href="color/c4tb.rle">Tub; Diamond** [3-16]</a></td>
	<td class="s">&nbsp;</td>
	<td><a class="p" href="color/c5bt.rle">Boat** [3-10]</a></td>
	<td class="s">&nbsp;</td>
	<td><a class="p" href="color/c6sn.rle">Snake [4-7]</a></td>
	<td><a class="p" href="color/c6sh.rle">Ship [3-7]</a></td>
	<td><a class="p" href="color/c6hv.rle">Beehive [3-5]</a></td>
	<td><a class="p" href="color/c6ac.rle">
	    Aircraft Carrier; Carrier [4-7]</a></td>
	<td><a class="p" href="color/c6bg.rle">Barge [3-6]</a></td>
    </tr>

    <tr>
	<td><a class="p" href="color/c7ls.rle">Python; Long snake [4-11]</a></td>
	<td><a class="p" href="color/c7lf.rle">Loaf; Burloaf [2-5]</a></td>
	<td><a class="p" href="color/c7et.rle">
	    Eater; Eater-1; Fishhook [2-5]</a></td>
	<td><a class="p" href="color/c7lb.rle">Long boat [3-12]</a></td>
	<td class="s">&nbsp;</td>
	<td><a class="p" href="color/c14-79.rle">
	    14.79; Paper- clip [4]</a></td>
	<td><a class="p" href="color/c14-507.rle">
	    14.507; Sidewalk [4-10]</a></td>
	<td class="s">&nbsp;</td>
	<td><a class="p" href="color/c18-287.rle">
	    18.287; Dead spark coil; JC; House on house [4-16]</a></td>
	<td><a class="p" href="color/c18-6707.rle">
	    18. 6707; Skewed house on house [4-10]</a></td>
    </tr>

    <tr>
	<td><a class="p" href="color/c8sl.rle">Shil- lelagh [4-9]</a></td>
	<td><a class="p" href="color/c8pd.rle">Pond [3-8]</a></td>
	<td><a class="p" href="color/c8lp.rle">Long ship [4-8]</a></td>
	<td><a class="p" href="color/c8cg.rle">8.3; Mango; Cigar [4]</a></td>
	<td><a class="p" href="color/c8ht.rle">
	    8.4; Hook w/ tail; Snake eater [4-8]</a></td>
	<td><a class="p" href="color/c8vs.rle">
	    8.1; Very long snake [5-11]</a></td>
	<td><a class="p" href="color/c8lg.rle">Long barge [4-8]</a></td>
	<td><a class="p" href="color/c8tt.rle">Tub w/ tail; Twit [4-9]</a></td>
	<td><a class="p" href="color/c8cs.rle">
	    8.1; Canoe; Sinking ship; Cis snake [4-15]</a></td>
	<td rowspan="2" class="s">&nbsp;</td>
    </tr>

    <tr>
	<td><a class="p" href="color/c9-2.rle">
	    9.2; Extra long snake [6-15]</a></td>
	<td><a class="p" href="color/c9-3.rle">
	    9.3; Long canoe; Long sinking ship [4]</a></td>
	<td><a class="p" href="color/c9-4.rle">
	    9.4; Integral; Integral sign [5-8]</a></td>
	<td><a class="p" href="color/c9-5.rle">
	    9.5; Up boat w/ tail; Trans- boat w/ tail [4-8]</a></td>
	<td><a class="p" href="color/c9-6.rle">
	    9.6; Down boat w/ tail; Cis- boat w/ tail [4]</a></td>
	<td><a class="p" href="color/c9-7.rle">
	    9.7; Long shil- lelagh [5-7]</a></td>
	<td><a class="p" href="color/c9-8.rle">
	    9.8; Long hook w/ tail [5-6]</a></td>
	<td><a class="p" href="color/c9-9.rle">
	    9.9; Tub w/ long tail; shil- lelagh w/ tub [5-6]</a></td>
	<td><a class="p" href="color/c9-10.rle">9.10; Hat [3-10]</a></td>
    </tr>
</table></p>

<map name="c-p1">
	<area coords="0,0,19,19" href="#top" />
	<area coords="0,221,19,240" href="#bottom" />
	<area coords="601,0,620,19" href="zip/c-p1.zip" />
	<area coords="601,221,620,240" href="stamp/c-p1.rle" />
	<area coords="0,0,69,69" href="color/c4bk.rle" />
	<area coords="70,0,129,69" href="color/c4tb.rle" />
	<area coords="130,0,189,69" nohref="nohref" />
	<area coords="190,0,249,69" href="color/c5bt.rle" />
	<area coords="250,0,309,69" nohref="nohref" />
	<area coords="310,0,369,69" href="color/c6sn.rle" />
	<area coords="370,0,429,69" href="color/c6sh.rle" />
	<area coords="430,0,489,69" href="color/c6hv.rle" />
	<area coords="490,0,549,69" href="color/c6ac.rle" />
	<area coords="550,0,620,69" href="color/c6bg.rle" />
	<area coords="0,70,69,129" href="color/c7ls.rle" />
	<area coords="70,70,129,129" href="color/c7lf.rle" />
	<area coords="130,70,189,129" href="color/c7et.rle" />
	<area coords="190,70,249,129" href="color/c7lb.rle" />
	<area coords="250,70,309,129" nohref="nohref" />
	<area coords="310,70,369,129" href="color/c14-79.rle" />
	<area coords="370,70,429,129" href="color/c14-507.rle" />
	<area coords="430,70,489,129" nohref="nohref" />
	<area coords="490,70,549,129" href="color/c18-287.rle" />
	<area coords="550,70,620,129" href="color/c18-6707.rle" />
	<area coords="0,130,69,189" href="color/c8sl.rle" />
	<area coords="70,130,129,189" href="color/c8pd.rle" />
	<area coords="130,130,189,189" href="color/c8lp.rle" />
	<area coords="190,130,249,189" href="color/c8cg.rle" />
	<area coords="250,130,309,189" href="color/c8ht.rle" />
	<area coords="310,130,369,189" href="color/c8vs.rle" />
	<area coords="370,130,429,189" href="color/c8lg.rle" />
	<area coords="430,130,489,189" href="color/c8tt.rle" />
	<area coords="490,130,549,189" href="color/c8cs.rle" />
	<area coords="550,130,620,189" nohref="nohref" />
	<area coords="0,190,69,240" href="color/c9-2.rle" />
	<area coords="70,190,129,240" href="color/c9-3.rle" />
	<area coords="130,190,189,240" href="color/c9-4.rle" />
	<area coords="190,190,249,240" href="color/c9-5.rle" />
	<area coords="250,190,309,240" href="color/c9-6.rle" />
	<area coords="310,190,369,240" href="color/c9-7.rle" />
	<area coords="370,190,429,240" href="color/c9-8.rle" />
	<area coords="430,190,489,240" href="color/c9-9.rle" />
	<area coords="490,190,549,240" href="color/c9-10.rle" />
	<area coords="550,190,620,240" nohref="nohref" />
</map>

<hr />
<a name="c-pp1"></a>
<h2>5 Multi-color <a class="i" href="pp1.htm">pseudo-still-lifes</a></h2>
<p><a class="p" href="stamp/c-pp1.rle"><img src="map/c-pp1.png"
 alt="multi-color pseudo-still-lifes"
 width="421" height="61" usemap="#c-pp1" /></a><br />
    <table width="425">
    <colgroup><col width="91" /><col span="3" width="80" /><col width="92" />
	</colgroup>
    <tr>
	<td><a class="p" href="color/c8bkbk.rle">
	    Block on block; Bi- block [2-8]</a></td>
	<td><a class="p" href="color/c9btbk.rle">Block on boat [3-11]</a></td>
	<td><a class="p" href="color/c10btbt1.rle">Up boat on boat [4-6]</a></td>
	<td><a class="p" href="color/c10btbt2.rle">
	    Down boat on boat [4-6]</a></td>
	<td><a class="p" href="color/c10hvbk.rle">Block on beehive [3-6]</a></td>
    </tr>
</table></p>

<map name="c-pp1">
	<area coords="0,0,19,19" href="#top" />
	<area coords="0,41,19,60" href="#bottom" />
	<area coords="401,0,420,19" href="zip/c-pp1.zip" />
	<area coords="401,41,420,60" href="stamp/c-pp1.rle" />
	<area coords="0,0,89,60" href="color/c8bkbk.rle" />
	<area coords="90,0,169,60" href="color/c9btbk.rle" />
	<area coords="170,0,249,60" href="color/c10btbt1.rle" />
	<area coords="250,0,329,60" href="color/c10btbt2.rle" />
	<area coords="330,0,420,60" href="color/c10hvbk.rle" />
</map>

<p>In most cases, multi-color pseudo-still-lifes (and other pseudo-objects) are
not very interesting, since most of them are formed either from synthesizing
two objects simultaneously back-to-back, or adding one object to a
previously-synthesized object. In either case, it is usually trivial to make one
piece of one color, and the other piece of a different color. Cases like the
ones shown above, where pseudo-objects form spontaneously, are more
interesting.</p>

<hr />
<a name="c-osc"></a>
<h2>28 Multi-color <a class="i" href="osc.htm">Oscillators</a></h2>
<p><a class="p" href="stamp/c-osc.rle"><img src="map/c-osc.png"
 alt="multi-color oscillators"
 width="621" height="201" usemap="#c-osc" /></a><br />
    <table width="625">
    <colgroup><col width="71" /><col span="8" width="60" /><col width="72" />
	</colgroup>
    <tr>
	<td class="y"><a class="p" href="color/c3bl.rle">
	    Blinker** [82]</a></td>
	<td><a class="p" href="color/c6td.rle">
	    Toad [3-4] (P2, P4, P8)</a></td>
	<td><a class="p" href="color/c6ck.rle">
	    Clock [4-9] (P2, P4, P8)</a></td>
	<td><a class="p" href="color/c6bc.rle">
	    Beacon [3]</a></td>
	<td class="y"><a class="p" href="color/c8bp.rle">
	    Bipole [12] (P2, P4, P6)</a></td>
	<td><a class="p" href="color/c9tp.rle">
	    Tripole [8] (P2, P4, P8)</a></td>
	<td><a class="p" href="color/c10qp.rle">
	    Quad- pole [6-10] (P2, P4, P8)</a></td>
	<td class="y"><a class="p" href="color/c12ff1.rle">
	    12-bit P2 #1 [18]</a></td>
	<td class="g"><a class="p" href="color/c12fx.rle">
	    Fox; Gnome [12]</a></td>
	<td><a class="p" href="color/c12px.rle">
	    Phoenix [10]</a></td>
    </tr>

    <tr>
	<td><a class="p" href="color/c18sc.rle">
	    Spark Coil [4-10]</a></td>
	<td class="y"><a class="p" href="color/c24fb.rle">
	    Fore and back; Complem- entary blinker [20]</a></td>
	<td><a class="p" href="color/c12ca.rle">
	    Caterer [11]</a></td>
	<td><a class="p" href="color/c13jm.rle">
	    Jam [8] (P3, P6, P12, P18)</a></td>
	<td><a class="p" href="color/c14eet.rle">
	    Two eaters; Eater eating eater [8-11] (P3, P6, P9, P18)</a></td>
	<td><a class="p" href="color/c18cutb1.rle">
	    Block on up cuphook w/ tail [8-13]</a></td>
	<td><a class="p" href="color/c12md.rle">
	    Mold [5-13] (P4, P12)</a></td>
	<td><a class="p" href="color/c12mz.rle">
	    Mazing [5]</a></td>
	<td><a class="p" href="color/c18mg.rle">
	    Mono- gram; Initials; JHC [15]</a></td>
	<td><a class="p" href="color/c28a4all.rle">
	    A for all [14]</a></td>
    </tr>

    <tr>
	<td><a class="p" href="color/c16oc.rle">
	    Octagon II [10-22]</a></td>
	<td colspan="2"><a class="p" href="color/c20et2z.rle">
	    Pentoad between two eaters [12]</a></td>
	<td><a class="p" href="color/c16ux.rle">
	    Unix [7]  (P6, P18)</a></td>
	<td class="g"><a class="p" href="color/c12fg.rle">
	    Figure-8; Big beacon [12]</a></td>
	<td><a class="p" href="color/c15br.rle">
	    Blocker [6-7]</a></td>
	<td><a class="p" href="color/c16tu.rle">
	    Tumbler [6-10]</a></td>
	<td><a class="p" href="color/c12pc.rle">
	    Penta- decath- lon [4]</a></td>
	<td colspan="2"><a class="p" href="color/c20bqbb1.rle">
	    Queen bee shuttle between cis blocks [6-7]</a></td>
    </tr>
</table></p>

<map name="c-osc">
	<area coords="0,0,19,19" href="#top" />
	<area coords="0,181,19,200" href="#bottom" />
	<area coords="601,0,620,19" href="zip/c-osc.zip" />
	<area coords="601,181,620,200" href="stamp/c-osc.rle" />
	<area coords="0,0,69,69" href="color/c3bl.rle" />
	<area coords="70,0,129,69" href="color/c6td.rle" />
	<area coords="130,0,189,69" href="color/c6ck.rle" />
	<area coords="190,0,249,69" href="color/c6bc.rle" />
	<area coords="250,0,309,69" href="color/c8bp.rle" />
	<area coords="310,0,369,69" href="color/c9tp.rle" />
	<area coords="370,0,429,69" href="color/c10qp.rle" />
	<area coords="430,0,489,69" href="color/c12ff1.rle" />
	<area coords="490,0,549,69" href="color/c12fx.rle" />
	<area coords="550,0,620,69" href="color/c12px.rle" />
	<area coords="0,70,69,129" href="color/c18sc.rle" />
	<area coords="70,70,129,129" href="color/c24fb.rle" />
	<area coords="130,70,189,129" href="color/c12ca.rle" />
	<area coords="190,70,249,129" href="color/c13jm.rle" />
	<area coords="250,70,309,129" href="color/c14eet.rle" />
	<area coords="310,70,369,129" href="color/c18cutb1.rle" />
	<area coords="370,70,429,129" href="color/c12md.rle" />
	<area coords="430,70,489,129" href="color/c12mz.rle" />
	<area coords="490,70,549,129" href="color/c18mg.rle" />
	<area coords="550,70,620,129" href="color/c28a4all.rle" />
	<area coords="0,130,69,200" href="color/c16oc.rle" />
	<area coords="70,130,189,200" href="color/c20et2z.rle" />
	<area coords="190,130,249,200" href="color/c16ux.rle" />
	<area coords="250,130,309,200" href="color/c12fg.rle" />
	<area coords="310,130,369,200" href="color/c15br.rle" />
	<area coords="370,130,429,200" href="color/c16tu.rle" />
	<area coords="430,130,489,200" href="color/c12pc.rle" />
	<area coords="490,130,549,200" href="color/c20bqbb1.rle" />
	<area coords="550,130,620,200" nohref="nohref" />
</map>

<hr />
<a name="c-ss"></a>
<h2>7 Multi-color <a class="i" href="ss.htm">spaceships</a></h2>
<p><a class="p" href="stamp/c-ss.rle"><img src="map/c-ss.png"
 alt="multi-color spaceships"
 width="441" height="121" usemap="#c-ss" /></a><br />
    <table width="445">
    <colgroup><col width="71" /><col span="5" width="60" /><col width="72" />
	</colgroup>
    <tr>
	<td><a class="p" href="color/c5gl.rle">
	    Glider; Feather- weight space- ship; FWSS [4-20] (P4, P12)</a></td>
	<td class="y"><a class="p" href="color/c9lw.rle">
	    Light- weight space- ship; LWSS; Small fish [25-x] (P4, P8, P16)</a></td>
	<td class="y"><a class="p" href="color/c11mw.rle">
	    Middle- weight space- ship; MWSS; Medium fish [23-x] (P4, P8, P16)</a></td>
	<td class="y"><a class="p" href="color/c13hw.rle">
	    Heavy- weight space- ship; HWSS; Big fish [21-x] (P4, P8, P16)</a></td>
	<td><a class="p" href="color/c39lsl.rle">
	    Schick ship behind two LWSS [10-x] (P12, P36)</a></td>
	<td><a class="p" href="color/c20lfr.rle">Loafer [8]</a></td>
	<td class="r"><a class="p" href="color/c44turt.rle">
	    Turtle [x] (P3, P24)</a></td>
    </tr>
</table></p>

<map name="c-ss">
	<area coords="0,0,19,19" href="#top" />
	<area coords="0,101,19,120" href="#bottom" />
	<area coords="421,0,440,19" href="zip/c-ss.zip" />
	<area coords="421,101,440,120" href="stamp/c-ss.rle" />
	<area coords="0,0,69,120" href="color/c5gl.rle" />
	<area coords="70,0,129,120" href="color/c9lw.rle" />
	<area coords="130,0,189,120" href="color/c11mw.rle" />
	<area coords="190,0,249,120" href="color/c13hw.rle" />
	<area coords="250,0,309,120" href="color/c39lsl.rle" />
	<area coords="310,0,369,120" href="color/c20lfr.rle" />
	<area coords="370,0,440,120" href="color/c44turt.rle" />
</map>

<p>There are actually four different basic arrangements of escort ships for the
<a class="i" href="flotilla.htm#ss-2s">Schick ship</a>, but only one is shown here, as
the engine only cares about the colors of the tail sparks. All the examples
shown here show escort ships whose tail sparks are a single color. Schick ships
with multi-colored escort ships are also possible.</p>

<p>The Turtle cannot be synthesized, but it is included here because of its
interesting hybrid colorization.</p>

<hr />
<a name="c-cons"></a>
<h2>10 Multi-color <a class="i" href="cons.htm">constellations</a></h2>
<p><a class="p" href="stamp/c-cons.rle"><img src="map/c-cons.png"
 alt="multi-color constellations"
 width="521" height="181" usemap="#c-cons" /></a><br />
    <table width="525">
    <colgroup><col width="91" /><col span="4" width="80" /><col width="112" />
	</colgroup>
    <tr>
	<td><a class="p" href="color/c8bkbk14.rle">
	    Two blocks offset (4, 1) [2-8]</a></td>
	<td><a class="p" href="color/c10btbt3.rle">
	    Two point- to- point boats [3-5]</a></td>
	<td><a class="p" href="color/c16blocs.rle">
	    Four skewed blocks [2]</a></td>
	<td><a class="p" href="color/c24hf.rle">
	    Honeyfarm [4]</a></td>
	<td><a class="p" href="color/c28by.rle">
	    Bakery [4]</a></td>
	<td><a class="p" href="color/c16lm.rle">
	    Blockade (via Lumps of muck) [2]</a></td>
    </tr>

    <tr>
	<td><a class="p" href="color/c6blbl04.rle">
	    Two blinkers offset (4, 0) [3]</a></td>
	<td><a class="p" href="color/c10lfbl.rle">
	    Loaf and blinker [2]</a></td>
	<td><a class="p" href="color/c12tl.rle">
	    Traffic light [5-9]</a></td>
	<td><a class="p" href="color/c18ic.rle">
	    Interchange [2]</a></td>
	<td colspan="2" class="s">&nbsp;</td>
    </tr>
</table></p>

<map name="c-cons">
	<area coords="0,0,19,19" href="#top" />
	<area coords="0,161,19,180" href="#bottom" />
	<area coords="501,0,520,19" href="zip/c-cons.zip" />
	<area coords="501,161,520,180" href="stamp/c-cons.rle" />
	<area coords="0,0,89,89" href="color/c8bkbk14.rle" />
	<area coords="90,0,169,89" href="color/c10btbt3.rle" />
	<area coords="170,0,249,89" href="color/c16blocs.rle" />
	<area coords="250,0,329,89" href="color/c24hf.rle" />
	<area coords="330,0,409,89" href="color/c28by.rle" />
	<area coords="410,0,520,89" href="color/c16lm.rle" />
	<area coords="0,90,89,180" href="color/c6blbl04.rle" />
	<area coords="90,90,169,180" href="color/c10lfbl.rle" />
	<area coords="170,90,249,180" href="color/c12tl.rle" />
	<area coords="250,90,329,180" href="color/c18ic.rle" />
	<area coords="330,90,520,180" nohref="nohref" />
</map>

<p>In most cases, multi-color constellations are not very interesting, since
most of them are formed either from synthesizing two or more objects
simultaneously back-to-back, or adding one object to a previously-synthesized
object or constellation. In either case, it is usually trivial to make one
piece of one color, and the other piece of a different color. Cases like the
ones shown above, where pseudo-objects form spontaneously, are more
interesting.</p>

<hr /><hr />
<a name="bottom"></a>
<p><b>Other types:</b>
	<a class="i" href="p1.htm">still-lifes</a>,
	<a class="i" href="pp1.htm">pseudo-still-lifes</a>,
	<a class="i" href="osc.htm">oscillators</a>,
	<a class="i" href="posc.htm">pseudo-oscillators</a>,
	<a class="i" href="period.htm">oscillators by period</a>,
	<a class="i" href="pperiod.htm">pseudo-oscillators by period</a>,
	<a class="i" href="gun.htm">guns</a>,
	multi-colored Life,
	<a class="i" href="ss.htm">
	    basic spaceships and pseudo-spaceships</a>,
	<a class="i" href="exotic.htm">exotic spaceships</a>,
	<a class="i" href="flotilla.htm">spaceships flotillae</a>,
	<a class="i" href="puff.htm">puffers</a>,
	<a class="i" href="cons.htm">constellations</a>,
	<a class="i" href="meth.htm">methuselahs</a>,
	<a class="i" href="bits-bad.htm">not quite stable objects</a>.</p>

<p><b>See also:</b> Life objects sorted by:
	<a class="i" href="objcount.htm">counts</a>,
	<a class="i" href="natural.htm">frequency of occurrence</a>,
	<a class="i" href="objcost.htm">cost in gliders</a>,
	<a class="i" href="objname.htm">name</a>,
	<a class="i" href="objsize.htm">size in bits</a>,
	or <a class="i" href="objtype.htm">type</a>.</p>

<p><a class="i" href="index.htm">Home page</a> |
<a class="i" href="lifepage.htm">Life page</a></p>
<p><a class="i" href="lifepage.htm#copyright">
Copyright &copy; 1997, 1998, 1999, 2013, 2014 by Mark. D. Niemiec.
All rights reserved</a>.<br />
This page was last updated on
<i>2015-02-19</i>.
</p>
</body></html>
